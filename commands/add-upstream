#!/bin/bash
SERVICE_NAME="$1"
APP_NAME="$2"

if [ -z "$SERVICE_NAME" ] || [ -z "$APP_NAME" ]; then
    echo "Usage: gokku nginx:add-upstream <service> <app>"
    echo ""
    echo "Examples:"
    echo "  gokku nginx:add-upstream nginx-lb api"
    echo "  gokku nginx:add-upstream nginx-lb web"
    exit 1
fi

# Source plugin helpers from Gokku repository https://github.com/thadeu/gokku/blob/main/scripts/plugin-helpers.sh
source /opt/gokku/scripts/plugin-helpers.sh

# Source local functions
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/../lib/functions.sh"

echo "-----> Adding upstream for app '$APP_NAME'"

# Get app domain
APP_DIR="/opt/gokku/apps/$APP_NAME"
CNAME_FILE="$APP_DIR/CNAME"

DOMAIN=""
if [ -f "$CNAME_FILE" ]; then
    DOMAIN=$(cat "$CNAME_FILE" | tr -d '\n')
    echo "-----> Using domain: $DOMAIN"
fi

# Determine upstream name
UPSTREAM_NAME="$APP_NAME"

# Get all running container ports using docker ps
get_ports_by_name "$APP_NAME"

# Create upstream configuration file
UPSTREAM_FILE="/opt/gokku/services/$SERVICE_NAME/conf.d/upstreams/${UPSTREAM_NAME}.conf"

if [ ${#PORTS[@]} -eq 0 ]; then
    echo "-----> No running containers found for app '$APP_NAME'"
    echo "-----> Creating upstream without servers (will be updated when containers start)"
    # Create empty upstream
    mkdir -p "$(dirname "$UPSTREAM_FILE")"
    cat > "$UPSTREAM_FILE" << EOF
upstream $UPSTREAM_NAME {
    # No servers available yet
}
EOF
else
    nginx_upstream_only "$UPSTREAM_FILE" "$UPSTREAM_NAME" "$SERVICE_NAME"
    echo "-----> Upstream configuration created: $UPSTREAM_FILE"
    echo "-----> Added ${#PORTS[@]} server(s) to upstream '$UPSTREAM_NAME'"
fi

# Add upstream to metadata
metadata_add_upstream "$SERVICE_NAME" "$UPSTREAM_NAME" "$APP_NAME"

# If domain exists, add location / to that domain
if [ -n "$DOMAIN" ]; then
    echo "-----> Adding location '/' for domain '$DOMAIN'"
    metadata_add_location "$SERVICE_NAME" "$DOMAIN" "/" "$UPSTREAM_NAME" "$APP_NAME"
    nginx_generate_server_block "$SERVICE_NAME" "$DOMAIN"
fi

# Ensure container is running
if ! ensure_nginx_running "$SERVICE_NAME"; then
    echo "-----> Failed to start nginx container"
    exit 1
fi

# Test configuration before applying
echo "-----> Testing nginx configuration..."
if ! docker exec "$SERVICE_NAME" nginx -t; then
    echo "-----> Configuration test failed"
    echo "-----> Fix configuration errors before continuing"
    exit 1
fi

# Reload nginx configuration
echo "-----> Reloading nginx configuration"

docker restart "$SERVICE_NAME" >/dev/null 2>&1
wait_for_container "$SERVICE_NAME" 15

if container_is_running "$SERVICE_NAME"; then
    echo "-----> Nginx container restarted"
else
    echo "-----> Warning: Container may not be running properly"
    docker logs --tail 20 "$SERVICE_NAME" 2>/dev/null || true
fi

if [ -n "$DOMAIN" ]; then
    echo "-----> Upstream '$UPSTREAM_NAME' added for domain '$DOMAIN'"
else
    echo "-----> Upstream '$UPSTREAM_NAME' added (no domain configured, use 'add-location' to add routes)"
fi
