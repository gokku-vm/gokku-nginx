#!/bin/bash
SERVICE_NAME="$1"
APP_NAME="$2"

if [ -z "$SERVICE_NAME" ] || [ -z "$APP_NAME" ]; then
    echo "Usage: gokku nginx:add-upstream <service> <app>"
    echo ""
    echo "Examples:"
    echo "  gokku nginx:add-upstream nginx-lb api"
    echo "  gokku nginx:add-upstream nginx-lb web"
    exit 1
fi

# Source plugin helpers from Gokku repository https://github.com/thadeu/gokku/blob/main/scripts/plugin-helpers.sh
source /opt/gokku/scripts/plugin-helpers.sh

# Source local functions
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/../lib/functions.sh"

echo "-----> Adding upstream for app '$APP_NAME'"

# Get app domain
APP_DIR="/opt/gokku/apps/$APP_NAME"
CNAME_FILE="$APP_DIR/CNAME"

if [ -f "$CNAME_FILE" ]; then
    DOMAIN=$(cat "$CNAME_FILE" | tr -d '\n')
    echo "-----> Using domain: $DOMAIN"
else
    DOMAIN="${APP_NAME}.local"
    echo "-----> No CNAME found, using default domain: $DOMAIN"
fi

# Get all running container ports using docker ps
UPSTREAM_NAME="$APP_NAME"
get_ports_by_name "$APP_NAME"

# Create upstream configuration
CONFIG_FILE="/opt/gokku/services/$SERVICE_NAME/conf.d/${UPSTREAM_NAME}.conf"

if [ ${#PORTS[@]} -eq 0 ]; then
    echo "-----> No running containers found for app '$APP_NAME'"
    echo "-----> Cannot create upstream without running containers"
    exit 1
else
    nginx_upstream_config "$CONFIG_FILE" "$UPSTREAM_NAME" "$DOMAIN"
    echo "-----> Upstream configuration created: $CONFIG_FILE"
    echo "-----> Added ${#PORTS[@]} server(s) to upstream '$UPSTREAM_NAME'"
fi

# Ensure container is running
if ! ensure_nginx_running "$SERVICE_NAME"; then
    echo "-----> Failed to start nginx container"
    exit 1
fi

# Test configuration before applying
echo "-----> Testing nginx configuration..."
if ! docker exec "$SERVICE_NAME" nginx -t 2>/dev/null; then
    echo "-----> Configuration test failed, but continuing..."
fi

# Restart container to ensure all changes are applied
echo "-----> Restarting nginx container to apply configuration"
if docker restart "$SERVICE_NAME" >/dev/null 2>&1; then
    echo "-----> Waiting for nginx to restart..."
    wait_for_container "$SERVICE_NAME" 30
    
    if container_is_running "$SERVICE_NAME"; then
        echo "-----> Nginx container restarted successfully"
    else
        echo "-----> Warning: Container restarted but may not be running properly"
        docker logs --tail 20 "$SERVICE_NAME" 2>/dev/null || true
    fi
else
    echo "-----> Failed to restart nginx container, trying reload instead"
    if docker exec "$SERVICE_NAME" nginx -s reload 2>/dev/null; then
        echo "-----> Nginx configuration reloaded"
    else
        echo "-----> Warning: Could not reload nginx configuration"
    fi
fi

echo "-----> Upstream '$UPSTREAM_NAME' added for domain '$DOMAIN'"
