#!/bin/bash
SERVICE_NAME="$1"
APP_NAME="$2"
PROCESS_TYPE="$3"

if [ -z "$SERVICE_NAME" ] || [ -z "$APP_NAME" ]; then
    echo "Usage: gokku nginx:update-upstream <service> <app> [process-type]"
    echo ""
    echo "Examples:"
    echo "  gokku nginx:update-upstream nginx-lb api"
    echo "  gokku nginx:update-upstream nginx-lb api web"
    exit 1
fi

# Source plugin helpers from Gokku repository https://github.com/thadeu/gokku/blob/main/scripts/plugin-helpers.sh
source /opt/gokku/scripts/plugin-helpers.sh

# Source local functions
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/../lib/functions.sh"

echo "-----> Updating upstream for app '$APP_NAME'"

# Determine upstream name
if [ -n "$PROCESS_TYPE" ]; then
    UPSTREAM_NAME="${APP_NAME}-${PROCESS_TYPE}"
else
    UPSTREAM_NAME="$APP_NAME"
fi

# Get all running container ports using docker ps
get_ports_by_name "$APP_NAME"

# Update upstream configuration file
UPSTREAM_FILE="/opt/gokku/services/$SERVICE_NAME/conf.d/upstreams/${UPSTREAM_NAME}.conf"

if [ ${#PORTS[@]} -eq 0 ]; then
    # No running containers, but keep upstream file with comment
    if [ -f "$UPSTREAM_FILE" ]; then
        mkdir -p "$(dirname "$UPSTREAM_FILE")"
        cat > "$UPSTREAM_FILE" << EOF
upstream $UPSTREAM_NAME {
    # No servers available
}
EOF
        echo "-----> Updated upstream configuration (no servers): $UPSTREAM_FILE"
    else
        echo "-----> No running containers found, upstream not created yet"
    fi
else
    nginx_upstream_only "$UPSTREAM_FILE" "$UPSTREAM_NAME" "$SERVICE_NAME"
    echo "-----> Upstream configuration updated: $UPSTREAM_FILE"
    echo "-----> Added ${#PORTS[@]} server(s) to upstream '$UPSTREAM_NAME'"
fi

# Ensure container is running
if ! ensure_nginx_running "$SERVICE_NAME"; then
    echo "-----> Failed to start nginx container"
    exit 1
fi

# Test configuration before applying
echo "-----> Testing nginx configuration..."
if ! docker exec "$SERVICE_NAME" nginx -t; then
    echo "-----> Configuration test failed"
    echo "-----> Fix configuration errors before continuing"
    exit 1
fi

# Restart container to ensure all changes are applied
echo "-----> Restarting nginx container to apply configuration"
if docker restart "$SERVICE_NAME" >/dev/null 2>&1; then
    echo "-----> Waiting for nginx to restart..."
    wait_for_container "$SERVICE_NAME" 30
    
    if container_is_running "$SERVICE_NAME"; then
        echo "-----> Nginx container restarted successfully"
    else
        echo "-----> Warning: Container restarted but may not be running properly"
        docker logs --tail 20 "$SERVICE_NAME" 2>/dev/null || true
    fi
else
    echo "-----> Failed to restart nginx container, trying reload instead"
    if docker exec "$SERVICE_NAME" nginx -s reload 2>/dev/null; then
        echo "-----> Nginx configuration reloaded"
    else
        echo "-----> Warning: Could not reload nginx configuration"
    fi
fi

# Regenerate all server blocks that use this upstream
load_metadata "$SERVICE_NAME"
domains=$(echo "$METADATA" | jq -r ".domains | keys[]" 2>/dev/null)

if [ -n "$domains" ]; then
    echo "$domains" | while IFS= read -r domain; do
        uses_upstream=$(echo "$METADATA" | jq ".domains[\"$domain\"].locations[]? | select(.upstream == \"$UPSTREAM_NAME\")" 2>/dev/null)
        if [ -n "$uses_upstream" ] && [ "$uses_upstream" != "null" ]; then
            nginx_generate_server_block "$SERVICE_NAME" "$domain"
        fi
    done
fi

echo "-----> Upstream '$UPSTREAM_NAME' updated"
